import { Dispatch, SetStateAction } from 'react';

/*
  Centralized types for the letskraack app.
  - Grouped by folder / module so other modules can import specific shapes.
  - Add new types here as the codebase grows. Keep this file as the single source of truth
    for commonly-shared domain types (services, api, db, components).
*/

/* ---------------------------- Context / Common ---------------------------- */
export type UserDetails = {
  id?: string;
  name?: string;
  email?: string;
};

export type UserDetailsContextType = {
  userDetail: UserDetails;
  setUserDetail: Dispatch<SetStateAction<UserDetails>>;
};

export type SelectedChapterIndexContextType = {
  selectedChapterIndex: number;
  setSelectedChapterIndex: Dispatch<SetStateAction<number>>;
};

/* ---------------------------- Services (services/) ---------------------------- */
export type CoachingOption = {
  name: string;
  prompt: string;
  summeryPrompt?: string;
};

export type AiModelRequest = {
  topic: string;
  coachingOption: string; // name of the CoachingOption
  message: string;
};

export type AiCompletionMessage = {
  role: 'system' | 'assistant' | 'user' | string;
  content: string;
};

export type AiCompletionResponse = {
  id?: string;
  model?: string;
  choices?: Array<{
    message?: AiCompletionMessage;
    // provider specific fields (candidates, content parts, inlineData etc.) are allowed
    [k: string]: unknown;
  }>;
  text?: string;
  // keep a flexible bag for provider-specific raw response
  raw?: unknown;
};

/* ---------------------------- API (app/api/) ---------------------------- */
export type YoutubeVideo = {
  videoId?: string;
  title?: string;
  description?: string;
  thumbnail?: string;
};

export type ChapterTopic = {
  chapterName: string;
  duration?: string;
  topics?: string[];
};

export type GeneratedChapterContent = {
  topic?: string;
  content?: string; // HTML or structured content
  // allow additional fields generated by the model
  [k: string]: unknown;
};

export type CourseJson = {
  course?: {
    name?: string;
    description?: string;
    category?: string;
    level?: string;
    includeVideo?: boolean;
    noOfChapters?: number;
    bannerImagePrompt?: string;
    chapters?: ChapterTopic[] | GeneratedChapterContent[];
    [k: string]: unknown;
  };
  [k: string]: unknown;
};

export type GenerateCourseContentRequest = {
  courseJson: CourseJson;
  courseId: string;
  courseName?: string;
};

export type GenerateCourseContentResult = {
  youtubeVideo?: YoutubeVideo[];
  courseData?: GeneratedChapterContent | GeneratedChapterContent[];
};

export type GetYoutubeVideoParams = {
  topic: string;
};

export type DiscussionRoomCreateRequest = {
  roomId: string;
  coachingOption: string;
  topic: string;
  expertName: string;
};

export type ConversationMessage = {
  role: 'user' | 'assistant';
  content: string;
};

export type AiChatRequest = {
  topic: string;
  coachingOption: string;
  lastFourMessage: ConversationMessage[];
};

export type AiChatResponse = ConversationMessage & {
  finishReason?: string;
};

/* ---------------------------- DB / Schema (config/schema.ts) ---------------------------- */
export type UserRow = {
  id: number;
  name: string;
  email: string;
  subscriptionId?: string;
};

export type CourseRow = {
  id: number;
  cid: string; // uuid/string course id
  title: string;
  description: string;
  duration: string;
  noOfChapters: number;
  includeVideo: boolean;
  difficultyLevel: string;
  category?: string;
  courseJson?: CourseJson;
  bannerImageUrl?: string;
  courseContent?: GeneratedChapterContent[] | unknown;
  userEmail: string;
};

export type EnrollCourseRow = {
  id: number;
  cid: string;
  userEmail: string;
  completedChapters?: string[] | unknown;
};

export type DiscussionRoomRow = {
  id: number;
  roomId: string;
  coachingOption: string;
  topic: string;
  expertName: string;
  conversation?: unknown; // conversation JSON stored in DB
};

/* ---------------------------- UI Components (components/) ---------------------------- */
export type LogoProps = {
  size?: number | string;
  className?: string;
};

export type ButtonProps = {
  children?: React.ReactNode;
  onClick?: () => void;
  disabled?: boolean;
  variant?: 'primary' | 'secondary' | 'ghost' | string;
};

/* ---------------------------- Helpers / generic ---------------------------- */
export type KeyValue = Record<string, unknown>;

/* NOTE:
   - Add more module-specific types here as you discover `any` in a file.
   - Prefer importing these types directly from their sections, e.g.:
       import { CourseRow, GenerateCourseContentRequest } from '@/types/types'
*/

